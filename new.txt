# Competitor Config: GET  + POST 

COMPETITOR_TBL = "hive_metastore.fieldforce_navigator_deployment.d_ffn_competitor_config"

def _exists_competitor(market, brand, comp_brand, comp_type):
    sql = f"""
        SELECT * FROM {COMPETITOR_TBL}
        WHERE UPPER(TRIM(MARKET)) = UPPER(TRIM('{_sq(market)}'))
          AND UPPER(TRIM(BRAND))  = UPPER(TRIM('{_sq(brand)}'))
          AND UPPER(TRIM(COMPETITOR_BRANDS)) = UPPER(TRIM('{_sq(comp_brand)}'))
          AND UPPER(TRIM(COMPETITION_TYPE))  = UPPER(TRIM('{_sq(comp_type)}'))
        LIMIT 1
    """
    df = dc.execute_query(sql)
    return df is not None and not df.empty

def _insert_competitor(market, brand, disease_state, drug_class, comp_brands,
                       comp_type, molecule, other_names, combination, added_by):
    
    other_sql = "NULL" if str(other_names).lower() == "null" else f"'{_sq(other_names)}'"
    comb_sql  = "NULL" if str(combination).lower() == "null" else f"'{_sq(combination)}'"
    sql = f"""
        INSERT INTO {COMPETITOR_TBL}
            (MARKET, BRAND, DISEASE_STATE, DRUG_CLASS, COMPETITOR_BRANDS, COMPETITION_TYPE,
             ADDED_BY, ENTRY_TIME, MOLECULE, OTHER_NAMES, COMBINATION)
        VALUES
            ('{_sq(market)}','{_sq(brand)}','{_sq(disease_state)}','{_sq(drug_class)}','{_sq(comp_brands)}','{_sq(comp_type)}',
             '{_sq(added_by)}', CURRENT_TIMESTAMP(), '{_sq(molecule)}', {other_sql}, {comb_sql})
    """
    dc.execute_non_query(sql)

@app.route("/competitor_config", methods=["GET"])
def competitor_config_get():
    """
    Returns: sample json 
    """
    try:
        sample_json = {
            "MARKET": {
                "Example Values": ["GBR", "THA", "ITA", "PRT"],
                "Description": "v",
                "Parameter_type": "Mandatory"
            },
            "BRAND": {
                "Example Values": ["SHINGRIX","AREXVY","BLENREP"],
                "Description": "Brand name.",
                "Parameter_type": "Mandatory"
            },
            "DISEASE_STATE": {
                "Example Values": ["RSV vaccine", "Shingles"],
                "Description": "Disease area",
                "Parameter_type": "Mandatory"
            },
            "DRUG_CLASS": {
                "Example Values": ["Non-adjuvanted", "Adjuvanted"],
                "Description": "High-level category",
                "Parameter_type": "Mandatory"
            },
            "COMPETITOR_BRANDS": {
                "Example Values": ["Abrysvo", "Generic-X"],
                "Description": "Competitor Brand",
                "Parameter_type": "Mandatory"
            },
            "COMPETITION_TYPE": {
                "Example Values": ["COMPETITOR"],
                "Description": "Type of relation COMPETITOR",
                "Parameter_type": "Mandatory"
            },
            "MOLECULE": {
                "Example Values": ["RSVPreF"],
                "Description": "molecule (if known).",
                "Parameter_type": "Optional"
            },
            "OTHER_NAMES": {
                "Example Values": ["null", "RSVPreF3", "Brand alias"],
                "Description": "v1",
                "Parameter_type": "Optional"
            },
            "COMBINATION": {
                "Example Values": ["null", "Compound-A + Compound-B"],
                "Description": "v1",
                "Parameter_type": "Optional"
            },
            "ADDED_BY": {
                "Example Values": ["abc.x.abc@gsk.com"],
                "Description": "Your email; can also be passed via 'Username' header.",
                "Parameter_type": "Mandatory"
            }
        }

        post_request_template = {
            "MARKET": "THA",
            "BRAND": "AREXVY",
            "DISEASE_STATE": "RSV vaccine",
            "DRUG_CLASS": "Non-adjuvanted",
            "COMPETITOR_BRANDS": "Abrysvo",
            "COMPETITION_TYPE": "COMPETITOR",
            "MOLECULE": "RSVPreF",       
            "OTHER_NAMES": "null",        
            "COMBINATION": "null",       
            "ADDED_BY": "abc.x.abc@gsk.com"
        }

        payload = {
            "sample_json": sample_json,
            "post_request_template": post_request_template,
            "desc": "Copy the template, change values as needed, and POST to /competitor_config."
        }

        return Response(json.dumps(payload, indent=2), mimetype="application/json"), 200
    except Exception as e:
        return jsonify({"error": f"Internal server error: {str(e)}"}), 500

@app.route("/competitor_config", methods=["POST"])
def competitor_config_post():
    """
    Inserts one competitor mapping row after a duplicate check on:
    (MARKET, BRAND, COMPETITOR_BRANDS, COMPETITION_TYPE).
    """
    try:
        body = request.get_json(force=True, silent=True) or {}

        # ADDED_BY Username
        added_by = _clean(body.get("ADDED_BY", "")) or _clean(request.headers.get("Username", "") or "")
        if not added_by:
            return jsonify({"error": "Missing 'ADDED_BY' in body or 'Username' in headers."}), 400

        # required minimal fields
        required = ["MARKET", "BRAND", "DISEASE_STATE", "DRUG_CLASS",
                    "COMPETITOR_BRANDS", "COMPETITION_TYPE"]
        missing = [k for k in required if k not in body or str(body.get(k, "")).strip() == ""]
        if missing:
            return jsonify({"error": f"Missing required fields: {', '.join(missing)}"}), 400

        # clean inputs
        market     = _clean(body["MARKET"])
        brand      = _clean(body["BRAND"])
        disease    = _clean(body["DISEASE_STATE"])
        drug_class = _clean(body["DRUG_CLASS"])
        comp_brand = _clean(body["COMPETITOR_BRANDS"])
        comp_type  = _clean(body["COMPETITION_TYPE"])
        molecule   = _clean(body.get("MOLECULE", ""))
        other_nm   = _clean(body.get("OTHER_NAMES", "null"))
        combo      = _clean(body.get("COMBINATION", "null"))

        # duplicate guard
        if _exists_competitor(market, brand, comp_brand, comp_type):
            return jsonify({
                "status": "error",
                "message": "Record already exists.",
                "conflict_on": {
                    "MARKET": market,
                    "BRAND": brand,
                    "COMPETITOR_BRANDS": comp_brand,
                    "COMPETITION_TYPE": comp_type
                }
            }), 409

        # insert
        _insert_competitor(market, brand, disease, drug_class, comp_brand,
                           comp_type, molecule, other_nm, combo, added_by)

        # Response
        response = {
            "status": "success",
            "message": "Inserted",
            "data": {
                "MARKET": market,
                "BRAND": brand,
                "DISEASE_STATE": disease,
                "DRUG_CLASS": drug_class,
                "COMPETITOR_BRANDS": comp_brand,
                "COMPETITION_TYPE": comp_type,
                "MOLECULE": molecule,
                "OTHER_NAMES": other_nm,
                "COMBINATION": combo,
                "ADDED_BY": added_by
            }
        }
        return Response(json.dumps(response, indent=2), mimetype="application/json"), 201

    except Exception as e:
        logging.error(traceback.format_exc())
        return jsonify({"error": f"Internal server error: {str(e)}"}), 500
















------------------------------------------------------













TABLE_FQN = "hive_metastore.fieldforce_navigator_deployment.llm_model_lookup"
 
def _mdl_clean(s):
    # trim + whitespace spaces
    return " ".join(str(s).strip().split())
 
def _mdl_sq(s):
    # escape single quotes
    return str(s).replace("'", "''")
 
def _mdl_require(body):
    required = [
        "MODEL_NAME", "DEPLOYMENT_NAME",
        "BRAND", "MARKET", "REGION",
        "TOKEN_LIMIT", "INPUT_TOKEN_LIMIT", "OUTPUT_TOKEN_LIMIT",
        "TOKEN_RATE_LIMIT", "PROJECT_INPUT_LIMIT"
    ]
    return [k for k in required if k not in body or str(body.get(k, "")).strip() == ""]
 
def _to_int(name, val):
    try:
        return int(str(val).strip())
    except Exception:
        raise ValueError(f"'{name}' must be an integer")
 
def _mdl_exists(model_name, deployment_name, brand, market, region):
    # config as unique 
    sql = f"""
        SELECT *
        FROM {TABLE_FQN}
        WHERE UPPER(TRIM(MODEL_NAME))      = UPPER(TRIM('{_mdl_sq(model_name)}'))
          AND UPPER(TRIM(DEPLOYMENT_NAME)) = UPPER(TRIM('{_mdl_sq(deployment_name)}'))
          AND UPPER(TRIM(BRAND))           = UPPER(TRIM('{_mdl_sq(brand)}'))
          AND UPPER(TRIM(MARKET))          = UPPER(TRIM('{_mdl_sq(market)}'))
          AND UPPER(TRIM(REGION))          = UPPER(TRIM('{_mdl_sq(region)}'))
        
    """
    df = dc.execute_query(sql)
    return df is not None and not df.empty
 
def _mdl_insert(model_name, deployment_name, token_limit,
                brand, market, region,
                input_token_limit, output_token_limit,
                token_rate_limit, project_input_limit, added_by):
    sql = f"""
        INSERT INTO {TABLE_FQN}
            (MODEL_NAME, DEPLOYMENT_NAME, TOKEN_LIMIT,
             BRAND, MARKET, REGION,
             INPUT_TOKEN_LIMIT, OUTPUT_TOKEN_LIMIT, TOKEN_RATE_LIMIT, PROJECT_INPUT_LIMIT,
             ADDED_BY, ENTRY_TIME)
        VALUES
            ('{_mdl_sq(model_name)}', '{_mdl_sq(deployment_name)}', {token_limit},
             '{_mdl_sq(brand)}', '{_mdl_sq(market)}', '{_mdl_sq(region)}',
             {input_token_limit}, {output_token_limit}, {token_rate_limit}, {project_input_limit},
             '{_mdl_sq(added_by)}', CURRENT_TIMESTAMP())
    """
    dc.execute_non_query(sql)
 
@app.route('/llm_model_config', methods=['POST'])
def add_llm_model_limits():
    try:
        body = request.get_json(force=True, silent=True) or {}
 
        # ADDED_BY from request body 
        added_by = _mdl_clean(body.get("ADDED_BY", "")) or _mdl_clean(request.headers.get("Username", "") or "")
        if not added_by:
            return jsonify({"error": "Missing 'ADDED_BY' in body or 'Username' in headers."}), status.HTTP_400_BAD_REQUEST
 
        # check : Required fields present
        missing = _mdl_require(body)
        if missing:
            return jsonify({"error": f"Missing required fields: {', '.join(missing)}"}), status.HTTP_400_BAD_REQUEST
 
        # normalized strings
        model_name      = _mdl_clean(body["MODEL_NAME"])
        deployment_name = _mdl_clean(body["DEPLOYMENT_NAME"])
        brand           = _mdl_clean(body["BRAND"])
        market          = _mdl_clean(body["MARKET"])
        region          = _mdl_clean(body["REGION"])
 
        # Parse integers 
        token_limit         = _to_int("TOKEN_LIMIT", body["TOKEN_LIMIT"])
        input_token_limit   = _to_int("INPUT_TOKEN_LIMIT", body["INPUT_TOKEN_LIMIT"])
        output_token_limit  = _to_int("OUTPUT_TOKEN_LIMIT", body["OUTPUT_TOKEN_LIMIT"])
        token_rate_limit    = _to_int("TOKEN_RATE_LIMIT", body["TOKEN_RATE_LIMIT"])
        project_input_limit = _to_int("PROJECT_INPUT_LIMIT", body["PROJECT_INPUT_LIMIT"])
 
        # non-negative checkpoint
        for k, v in [
            ("TOKEN_LIMIT", token_limit),
            ("INPUT_TOKEN_LIMIT", input_token_limit),
            ("OUTPUT_TOKEN_LIMIT", output_token_limit),
            ("TOKEN_RATE_LIMIT", token_rate_limit),
            ("PROJECT_INPUT_LIMIT", project_input_limit),
        ]:
            if v < 0:
                return jsonify({"error": f"'{k}' must be >= 0"}), status.HTTP_400_BAD_REQUEST
 
        # Duplicate check on the identifying tuple
        if _mdl_exists(model_name, deployment_name, brand, market, region):
            return jsonify({
                "status": "error",
                "message": "Record already exists (case-insensitive).",
                "conflict_on": {
                    "MODEL_NAME": model_name,
                    "DEPLOYMENT_NAME": deployment_name,
                    "BRAND": brand, "MARKET": market, "REGION": region
                }
            }), status.HTTP_409_CONFLICT
 
        # Insert
        _mdl_insert(model_name, deployment_name, token_limit,
                    brand, market, region,
                    input_token_limit, output_token_limit,
                    token_rate_limit, project_input_limit, added_by)
 
        return jsonify({
            "status": "success",
            "message": "Record inserted.",
            "data": {
                "MODEL_NAME": model_name,
                "DEPLOYMENT_NAME": deployment_name,
                "TOKEN_LIMIT": token_limit,
                "BRAND": brand, "MARKET": market, "REGION": region,
                "INPUT_TOKEN_LIMIT": input_token_limit,
                "OUTPUT_TOKEN_LIMIT": output_token_limit,
                "TOKEN_RATE_LIMIT": token_rate_limit,
                "PROJECT_INPUT_LIMIT": project_input_limit,
                "ADDED_BY": added_by
            }
        }), status.HTTP_201_CREATED
 
    except ValueError as ve:
        # Error 400 for bad ints
        return jsonify({"error": str(ve)}), status.HTTP_400_BAD_REQUEST
    except Exception as e:
        logging.error(traceback.format_exc())
        return jsonify({"error": f"Internal server error: {str(e)}"}), status.HTTP_500_INTERNAL_SERVER_ERROR
